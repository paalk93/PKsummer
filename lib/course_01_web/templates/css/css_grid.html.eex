<section>
  <div>
    <h1>CSS grid</h1>
    <p><strong>display:grid - </strong>Defines a grid.</p>
    <p><strong>grid-template-rows/columns - </strong>Defines the amount of rows and colums for the grid.</p>
    <p><strong>grid-row/column - </strong>Used to place items inside the grid.</p>
    <p>When we create a grid we create an area where we can place items within.</p>
    <p>Makeing the grid gives us various "grid locations", to help us place items where we want them.</p>
    <p>When working with grid we can say it comes in two parts, first creating the grid, and giving our items a position in it.</p>
    <p>We use grid-template-rows/columns using %, em, px, rem or fr.</p>
    <p>This tells the grid how many parts we want to divide it into, rows beeing the number of rows(vertical)<br>
      and columns beeing the number of columns(horizontal).
    </p>
    <p>When using fr the size will be set to whatever space is available, if we used % that one part will be set to a constant height/width.</p>
    <p>Then we make sepparate classes for each "component" to place within the grid.</p>
    <p>We simply use grid-row/column followed by 1 / 2 for example to tell the grid which area this component is going to cover.</p>
    <p>We will go over it in more detail in the code example.</p>
    <p>Grid is best used on larger parts, like the main layout of a page.</p>
  </div>
  <div>
    <h3>Visual example </h3>
    <div class="cssgrid-example">
      <div class="example-box1">Box 1</div>
      <div class="example-box2">Box 2</div>
      <div class="example-box3">Box 3</div>
      <div class="example-box4">Box 4</div>
      <div class="example-box5">Box 5</div>
      <div class="example-box6">Box 6</div>
      <div class="example-box7">Box 7</div>
      <div class="example-box8">Box 8</div>
      <div class="example-box9">Box 9</div>
    </div>
    <p>When i think in grid i always think about the lines, eventho we said 3 rows there are 4 lines drawn up.<br>
      And we use these lines when we place our items, always a start and an end.
    </p>
    <p>Box 1 beeing grid-row: 1 / 2, and grid-column: 1 / 2.</p>
    <p>Verticaly starting on line 1 ending at line 2.</p>
    <p>Horizontaly starting on line 1 and ending at line 2.</p>
    <p>Box 6 beeing grid-row: 2 / 3, and grid-column: 3 / 4.</p>
    <p>Verticaly starting on line 2 ending at line 3.</p>
    <p>Horizontaly starting on line 3 and ending at line 4. And so on.</p>
  </div>
  <div>
    <h3>Code example and explanation.</h3>
    <pre>
      <code>
        .cssgrid-example1{
	         display:grid;
        /* defines that this is a grid */

	         height:100%;
        /* sets the height of the grid to cover the entier page */

	         grid-template-rows: 15% 1fr 1fr;
        */ defines the amount of rows, 1fr means it does not have a size, it will be whatever to cover the page,
           the 2nd and 3rd row are whichever height, while the 1st is 15%. */

	         grid-template-columns: 1fr 1fr;
        */ defines the amount of columns, their eaqually divided and will scale up/down if there is space. */

        }

        .cssgrid-area-example1{
	        grid-row: 1 / 2;
        /* Creates an area which begin on line 1 and ends at line 2 verticaly in the grid. */

	        grid-column: 1 / 3;
        /* And line 1 - 3 horizontaly. */

        }


        /* Another way */


        cssgrid-example2{
          display: grid;
          grid-template-rows: repeat(4, 1fr);
        /* Sort of works the same way, only a little shortcut when generating the amount of rows and columns. */

          grid-template-columns: repeat(3, 1fr);
        }

        cssgrid-area-example2{
          grid-area: 1 / 1 / span 2 /span end
        /* Starts on row 1, and column 1 spans down horizontaly by two, and spans out verticaly to the end of
           the grid. */

        {


        /* Another way */


        .cssgrid-example3{
          display: grid;
          height: 100%;
          grid-template: 2em 1fr 2em / 10em 1fr;
        /* Divide it into 3 rows and 2 columns. 1st and 3rd row beeing 2em in height, and the 1st row beeing 10em
           in width. */

        /* When having 3 rows and 2 columns we can think of our page beeing divided into 6 pieces. /*

          grid-template-areas:
          "nav nav"
          "sidebar main"
          "footer footer";
        /* Here we draw the grid according to the size we set it to be using name referances. */
        }

        .cssgrid-area-example-nav{
          grid-area: nav;
        /* This will take up the entire "nav" area, beeing row 1, column 1 and 2. */
        }

        .cssgrid-area-example-sidebar{
          grid-area: sidebar;
        /* This will take up the "sidebar" area, beeing row 2, column 1. */
        }

        .cssgrid-area-example-main{
          grid-area: main;
        /* This will take up the "main" area, beeing row 2, column 2. /*
        }

        .cssgrid-area-example-footer{
          grid-area: footer;
        /* This will take up the entire "footer" area, beeing row 3, column 1 and 2. */
        }
      </code>
    </pre>
  </div>
</section>
